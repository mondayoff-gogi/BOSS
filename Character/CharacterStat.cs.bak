using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CharacterStat : MonoBehaviour
{
    //*************** 기본적인 케릭터 스테이터스 ***************

    // 케릭터의 체력. 
    [HideInInspector]
    public float HP = 100f;
    [HideInInspector]
    public float MaxHP = 100f;

    // 마나 
    [HideInInspector]
    public float MP = 0f;
    [HideInInspector]
    public float MaxMp = 0f;

    //물리 공격력. 
    [HideInInspector]
    public float PhysicalAttackPower = 0f;

    //마법 공격력. 
    [HideInInspector]
    public float MagicAttackPower = 0f;

    // 물리 방어력. 
    [HideInInspector]
    public float PhysicalArmor = 0f;

    //마법 방어력. 
    [HideInInspector]
    public float MagicArmorPower = 0f;

    //케릭터 기본공격 사정거리
    [HideInInspector]
    public float Attack_range=0f;

    //케릭터 기본공격 공격속도
    [HideInInspector]
    public float Attack_speed = 0f;

    [HideInInspector]
    public float move_speed = 0f;


    //케릭터 직업 번호
   // [HideInInspector]
    public int char_num;

    private RuntimeAnimatorController[] _animation;  //이거 public으로 할필요 없고 그냥 private 으로 다 넣으면 됩니다..

    public bool is_firstCharacter;

    // 아이템을 등록할 리스트
    public List<Item> itemList;

    // 캐릭터가 소지하고 있는 아이템 리스트
    public List<Item> equipList;
    //*************** 기본적인 케릭터 스테이터스 ***************



    private GameObject hit_prefab_temp;
    private GameObject hit_prefab;
    private GameObject heal_prefab_temp;
    private GameObject heal_prefab;

    private void Awake()
    {
        itemList = new List<Item>();
        equipList = new List<Item>();
        //if (is_firstCharacter)                 //바로 복구 바랍니다!!
        //    char_num = UpLoadData.character_index[0];
        //else
        //    char_num = UpLoadData.character_index[1];
        DatabaseManager.instance.Init_char_stat(char_num);
        MaxHP = DatabaseManager.instance.MaxHP;
        HP = DatabaseManager.instance.HP;
        MP = DatabaseManager.instance.MP;
        MaxMp = DatabaseManager.instance.MaxMp;
        PhysicalAttackPower = DatabaseManager.instance.PhysicalAttackPower;
        MagicAttackPower = DatabaseManager.instance.MagicAttackPower;
        PhysicalArmor = DatabaseManager.instance.PhysicalArmor;
        MagicArmorPower = DatabaseManager.instance.MagicArmorPower;
        Attack_range = DatabaseManager.instance.NormalAttackRange;
        Attack_speed = DatabaseManager.instance.NormalAttackSpeed;
        move_speed = DatabaseManager.instance.MoveSpeed;
        itemList = DatabaseManager.instance.itemList;
        equipList = DatabaseManager.instance.equipList;
        InputAnimator();
        ChangeSprite();
    }

    private void Start()
    {
        StartCoroutine(Healself());
        hit_prefab = Resources.Load("Effect/BloodSplat_FX") as GameObject;
        hit_prefab_temp = Instantiate(hit_prefab, this.transform);//맞은 이펙트
        hit_prefab_temp.SetActive(false);
        heal_prefab = Resources.Load("Effect/EnergyPull_FX") as GameObject;
        heal_prefab_temp = Instantiate(heal_prefab, this.transform);//힐 이펙트
        heal_prefab_temp.SetActive(false);
    }

    private void ChangeSprite()
    {
        this.GetComponent<Animator>().runtimeAnimatorController = _animation[char_num];
    }
    private void InputAnimator()
    {
        _animation = new RuntimeAnimatorController[8];
        _animation[0] = Resources.Load<RuntimeAnimatorController>("Animator/Assassin") as RuntimeAnimatorController;
        _animation[1] = Resources.Load<RuntimeAnimatorController>("Animator/Bow") as RuntimeAnimatorController;
        _animation[2] = Resources.Load<RuntimeAnimatorController>("Animator/Fan") as RuntimeAnimatorController;
        _animation[3] = Resources.Load<RuntimeAnimatorController>("Animator/Hammer") as RuntimeAnimatorController;
        _animation[4] = Resources.Load<RuntimeAnimatorController>("Animator/Healer") as RuntimeAnimatorController;
        _animation[5] = Resources.Load<RuntimeAnimatorController>("Animator/Mage") as RuntimeAnimatorController;
        _animation[6] = Resources.Load<RuntimeAnimatorController>("Animator/Shield") as RuntimeAnimatorController;
        _animation[7] = Resources.Load<RuntimeAnimatorController>("Animator/Spear") as RuntimeAnimatorController;
    }
    public void GetDamage(float _damage,bool is_magic)
    {
        if(this.GetComponentInChildren<ShieldSkill4>() != null)
        {
            GameUI.instance.FloatingGreenEffect(this.transform.position, "Protected");
            this.GetComponentInChildren<ShieldSkill4>().GetShieldDamage(_damage);
            return;
        }

        if (this.GetComponentInChildren<MageSkill2>() != null)
        {
            GameUI.instance.FloatingGreenEffect(this.transform.position, "Protected");
            this.GetComponentInChildren<MageSkill2>().GetShieldDamage(_damage);
            return;
        }

        GameUI.instance.FloatingRedDamage(this.transform.position, _damage);

        if(this.GetComponentInChildren<ShieldSkill2>() != null)
        {
            _damage = 0;
            GameUI.instance.FloatingGreenEffect(this.transform.position, "Invincible");
            return;
        }


        StartCoroutine(Blink());

        if (is_magic)
        {
            _damage -= MagicArmorPower;
        }
        else
        {
            _damage -= PhysicalArmor;
        }
        HP -= _damage;

        if (HP <= 0)
        {
            this.tag = "DeadPlayer";
            this.GetComponentInChildren<CharacterClick>().CharacterDead();
            this.GetComponent<Animator>().SetBool("IsDead", true);
            this.GetComponent<CapsuleCollider2D>().enabled = false;
            GameManage.instance.num_char--; //한명 죽음
            this.GetComponent<Character_Control>().Init_skill();
            SkillManager.instance.SkillCanceled(this.is_firstCharacter);
            
        }

    }
    public void Revive()
    {
        this.HP = this.MaxHP / 2;
        this.tag = "Player";
        this.GetComponentInChildren<CharacterClick>().CharacterRevive();
        this.GetComponent<Animator>().SetBool("IsDead", false);
        this.GetComponent<CapsuleCollider2D>().enabled = true;
        GameManage.instance.num_char++; //한명 살아남

    }

    public void GetHeal(float _heal)
    {
        StartCoroutine(Heal());

        GameUI.instance.FloatingGreenDamage(this.transform.position, _heal);
        if(HP+_heal>MaxHP)
        {
            HP = MaxHP;
        }
        else
        {
            HP += _heal;
        }
    }

    public void GetMana(float _mana)
    {
        StartCoroutine(Mana());

        if (MP + _mana > MaxMp)
        {
            MP = MaxMp;
        }
        else
        {
            MP += _mana;
        }
    }

    IEnumerator Healself()
    {
        while(true)
        {
            yield return new WaitForSeconds(5.0f);
            if(this.CompareTag("Player")) 
            {
                GetHeal(1);

                if (MP + 5 > MaxMp)
                    MP = MaxMp;
                else
                    MP += 5;
            }
        }

    }

    IEnumerator Blink()
    {
        hit_prefab_temp.SetActive(true);
        this.GetComponent<SpriteRenderer>().color = new Color(1, 0, 0);
        yield return new WaitForSeconds(0.1f);
        this.GetComponent<SpriteRenderer>().color = new Color(1,1,1);
        hit_prefab_temp.SetActive(false);

    }
    IEnumerator Heal()
    {
        heal_prefab_temp.SetActive(true);
        this.GetComponent<SpriteRenderer>().color = new Color(0, 1, 0);
        yield return new WaitForSeconds(0.1f);
        this.GetComponent<SpriteRenderer>().color = new Color(1, 1, 1);
        heal_prefab_temp.SetActive(false);
    }
    IEnumerator Mana()
    {
        this.GetComponent<SpriteRenderer>().color = new Color(0, 0, 1);
        yield return new WaitForSeconds(0.1f);
        this.GetComponent<SpriteRenderer>().color = new Color(1, 1, 1);
    }
}
